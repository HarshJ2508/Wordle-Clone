import { generateWord, getDetailsOfWord } from "./word.js"

// Preventing default behavior of input tag i.e when user click particular input, it should not display any value 
const cols = document.querySelectorAll('.col')
cols.forEach(col => {
    col.addEventListener('mousedown', (e) => {
        e.preventDefault()
    })
})


// Loading spinner and hiding grid while fetching word from API
const spinner = document.querySelector('.spinner')
const gridContainer = document.querySelector('.gridContainer')
const keyboardContainer = document.querySelector('.keyBoardContainer')

// --------------------------------------------------------------------------------------------------

// Fetching word and it's details from API 
var wordToGuessed = null

function fetchAWord() {
    generateWord()
        .then(data => {
            if(data.title === 'No Definitions Found') {
                // Word not found, fetch again
                fetchAWord()
            } 
            else {
                spinner.classList.add("hideSpinner")
                wordToGuessed = data[0].word
                gridContainer.classList.add("activeGrid")
                keyboardContainer.classList.add("activeKeys")
                console.log("Word to Guess => ",wordToGuessed)
            }
        })
        .catch(err => {
            console.log("Error occured => ",err)
        })
}

// Call the function to fetch the word
fetchAWord()

// -------------------------------------------------------------------------------------------------


// Initializing the rows and columns of the game
var row, col; 
const colSize = 5, rowSize = 6
let index = 0, rowNo = 1

init(rowNo)

function init(rowNo) {
    if(rowNo <= rowSize) {
        row = document.getElementById(`row-${rowNo}`)
        col = row.children
        index = 0
    }
}

// -------------------------------------------------------------------------------------------------

// CASE - 1: When user presses any key from keyboard
document.addEventListener('keydown', (event) => fillLetterInCol(event.key))  

function fillLetterInCol(key) {
    if(key === 'Backspace' && index >= 1) {
        index--
        col[index].value = ""
        if(col[index].classList.contains('scaleCol')) col[index].classList.remove('scaleCol')
    } 
    else if(key >= 'a' && key <= 'z' && index < colSize) {
        col[index].style["animation-delay"] = '0s'
        col[index].classList.add('scaleCol')
        col[index++].value = key
    }
    else if(key === 'Enter' && index === colSize) {
        var word = ""
        for(let i = 0; i < colSize; i++) {
            word += col[i].value
        }
        console.log("Word entered by user: ",word)
        // Check the word matches with random word generated by API 
        checkWord(word, wordToGuessed)
    }
}

// -------------------------------------------------------------------------------------------------

function checkWord(word, wordToGuessed) {
    if(wordToGuessed !== null) {
        // Check if word is a valid dictionary word or not with the help of an API 
        isAValidWord(word)
            .then((isValid) => {
                if(isValid){    
                    // Valid Word
                    // Check each character and add an animation to each cell/column
                    let i = 0, cnt = 0
                    for(i = 0; i < colSize; i++) {
                        var key
                        if(col[i].classList.contains('shakeCol')) col[i].classList.remove('shakeCol')
                        for(let j = 0; j < 28; j++) {
                            if(keys[j].value.toLowerCase() === word[i]) {
                                key = keys[j] 
                                break
                            }
                        }
                        if(word[i] === wordToGuessed[i]) {
                            col[i].classList.add('greenCol')
                            if(key.classList.contains('yellowKey')) key.classList.remove('yellowKey')
                            if(key.classList.contains('grayKey')) key.classList.remove('grayKey')
                            key.classList.add('greenKey')
                            cnt++
                        }
                        else if(checkLetterInWord(word[i], wordToGuessed)) {
                            col[i].classList.add('yellowCol')
                            if(key.classList.contains('grayKey')) key.classList.remove('grayKey')
                            if(!key.classList.contains('greenKey')) key.classList.add('yellowKey')
                        }
                        else {
                            col[i].classList.add('grayCol')
                            if(!key.classList.contains('greenKey') || !key.classList.contains('yellowKey')) key.classList.add('grayKey')
                        }
                        col[i].style["animation-delay"] = `${i * 0.5}s`
                    }
                    if(cnt === colSize || rowNo === rowSize) {
                        setTimeout(() => {
                            if(rowNo === rowSize) {
                               
                            }
                            else if(cnt === colSize) {
                                gridContainer.classList.remove("activeGrid")
                                keyboardContainer.classList.remove("activeKeys")
                            }
                        }, 3500)
                    }
                    rowNo += 1
                    init(rowNo)
                }
                else{
                    // Invalid Word
                    //  document.querySelector('.toaster').classList.add("activeToaster")
                    for(let i = 0; i < colSize; i++) {
                        col[i].classList.add('shakeCol')
                    }
                }
        })
       
    }
}

// For yellow columns
function checkLetterInWord(letter, wordToGuessed) {
    for(let i = 0; i < colSize; i++) {
        if(letter === wordToGuessed[i]) return true
    }
    return false
}

// API call to check whether user entered word is a dictionary word or not
async function isAValidWord(word) {
    return getDetailsOfWord(word, false)
        .then(data => {
            return data.title !== 'No Definitions Found'
        })
        .catch(err => {
            console.log("Error occurred => ", err)
            return false
        })
}

// -------------------------------------------------------------------------------------------------

// CASE - 2: When user presses any key from keyboard displayed on UI
const keys = document.querySelectorAll('.key')


keys.forEach((key) => {
    key.addEventListener('click', () => {
        if(key.value === "Backspace" || key.value === "Enter") {
            fillLetterInCol(key.value) 
        }
        else fillLetterInCol(key.value.toLowerCase())
    })
}) 






